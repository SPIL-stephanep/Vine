Vine.js
-About 1.7KB(about 1k gzipped)
-Can be used with or without the DOM

Goal
-<2KB
-Cross-browser
-Easily embedded and used in libraries
-usable standalone

Tested in:
-Browser:Grade*
-Chrome 11:A
-IE 8:A
-FF 4:A
-Opera 11:A

*A=Full support, B=Partial support, C=no support

API:

vine.bind(target:Object/DOMElement,type:String,handler:Function[,data:Object]) //binds a handler to the element
vine.unbind(target:Object/DOMElement[,type:String][,handler:Function)) //unbinds a handler based on criteria
vine.trigger(target:Object/DOMElement[,type:String][,event:Object/Event]) //returns event object after handler execution

new vine.Event(event:Object/Event) //normalizes an event (internal)

Examples:
//if passed a string-it looks for an element with that id
vine.bind("ch","click",function(e){
e.preventDefault();
})

//simulate a mouseclick, this will check a checkbox if no events are bound to prevent that.
vine.trigger("check_box","click")

//will focus on a textarea
vine.trigger("text","focus")

Plugins:
*delegate
   -vine.delegate(context:Document/DOMElement,target:DOMElement,type:String,handler:Function[,data:Object])
   -vine.undelegate(context:Document/DOMElement,target:DOMElement,type:String)
*once
   -vine.once(target:Object/DOMElement,type:String,handler:Function[,data:Object]) //binds a handler that will be unbound once triggered